-- Ankit Bansal Linkeind post
CREATE TABLE sales
(
order_date date,
customer VARCHAR(512),
qty INT
);

INSERT INTO sales (order_date, customer, qty) VALUES ('2021-01-01', 'C1', '20');
INSERT INTO sales (order_date, customer, qty) VALUES ('2021-01-01', 'C2', '30');
INSERT INTO sales (order_date, customer, qty) VALUES ('2021-02-01', 'C1', '10');
INSERT INTO sales (order_date, customer, qty) VALUES ('2021-02-01', 'C3', '15');
INSERT INTO sales (order_date, customer, qty) VALUES ('2021-03-01', 'C5', '19');
INSERT INTO sales (order_date, customer, qty) VALUES ('2021-03-01', 'C4', '10');
INSERT INTO sales (order_date, customer, qty) VALUES ('2021-04-01', 'C3', '13');
INSERT INTO sales (order_date, customer, qty) VALUES ('2021-04-01', 'C5', '15');
INSERT INTO sales (order_date, customer, qty) VALUES ('2021-04-01', 'C6', '10');

-- Find the number of new customers every date.

--select * from sales;

with cte as (select min(order_date) as order_date,customer from sales group by customer)
select count(customer) as cnt, order_date
from cte group by order_date;

====================================================================================================

create table company_revenue 
(
company varchar(100),
year int,
revenue int
)

insert into company_revenue values 
('ABC1',2000,100),('ABC1',2001,110),('ABC1',2002,120),('ABC2',2000,100),('ABC2',2001,90),('ABC2',2002,120),('ABC3',2000,500),('ABC3',2001,400),('ABC3',2002,600),('ABC3',2003,800);

--- find the companies whose revenue is increasing every year
--select * from company_revenue;

with cte as
(select
lead(revenue,1) over (partition by company order by year) ld, company, year, revenue
from company_revenue)
select a.company, a.year,a.revenue,a.ld from cte a join cte b on a.company=b.company
where a.year-b.year=1 and a.ld>a.revenue and a.company not in(select a.company from cte a where a.ld<=a.revenue);
-- where ld>revenue and ;


second method:
--select * from company_revenue;

with cte as
(select
lead(revenue,1) over (partition by company order by year) ld_rev,
lead(year,1) over (partition by company order by year) ld_year, company, year, revenue
from company_revenue)
select distinct(company) from cte
where ld_rev>revenue and ld_year-year=1 and company not in(select company from cte where ld_rev<=revenue)
-- where ld>revenue and ;
====================================================================================================
-- Ankit Bansal Linkeind post
CREATE TABLE flights 
(
 cid VARCHAR(512),
 fid VARCHAR(512),
 origin VARCHAR(512),
 Destination VARCHAR(512)
);

INSERT INTO flights (cid, fid, origin, Destination) VALUES ('1', 'f1', 'Del', 'Hyd');
INSERT INTO flights (cid, fid, origin, Destination) VALUES ('1', 'f2', 'Hyd', 'Blr');
INSERT INTO flights (cid, fid, origin, Destination) VALUES ('1', 'f3', 'Blr', 'Mum');
INSERT INTO flights (cid, fid, origin, Destination) VALUES ('2', 'f4', 'Mum', 'Agra');
INSERT INTO flights (cid, fid, origin, Destination) VALUES ('2', 'f5', 'Agra', 'Kol');
--find source and destination for each customer :

-- if there are multiple connecting flights
with cte_src as(select cid,origin,row_number()over(partition by cid order by fid asc) as rn, destination from flights),
cte_dest as(select cid,origin,row_number()over(partition by cid order by fid desc) as rn, destination from flights)
select s.cid, s.origin, d.destination 
from cte_src s join cte_dest d on s.cid=d.cid where s.rn=1 and d.rn=1

-- if just one connecting flight
with cte as(
select *, Lead(Destination,1) over(partition by cid order by cid) as destination1 from flights ) select cid,origin,destination1  from cte 
where destination1 is not null

====================================================================================================

create table input(id int,name varchar(50));
insert into input values(1,'APPLE');
insert into input values(2,'APPLE');
insert into input values(3,'APPLE');
insert into input values(4,'ORANGE');
insert into input values(5,'ORANGE');
insert into input values(6,'APPLE');
insert into input values(7,'APPLE');
insert into input values(8,'BANANA');
insert into input values(9,'BANANA');
insert into input values(10,'ORANGE');
insert into input values(11,'ORANGE');
insert into input values(12,'ORANGE');
insert into input values(13,'APPLE');
insert into input values(14,'APPLE');
insert into input values(15,'BANANA');

Expected output-1:
id name   rank    output2_rank
1  apple  1			1
2  apple  1			1
3  apple  1			1
4  orange 2			1
5  orange 2			1
6  apple  3			2
7  apple  3			2
8  banana 4			1
9  banana 4			1	
10 orange 5			2

output 1:-
=======
with cte as(
select *,lag(name,1,'NA') over(order by id) as lg from input),
cte2 as(
select *,case when name!=lg then 1 else 0 end as rn from cte)
select *,sum(rn) over(order by id) as sm from cte2;

output 2:-
=======
with cte as(
select *,lag(name,1,'NA') over(order by id) as lg from input),
cte2 as(
select *,case when name!=lg then 1 else 0 end as rn from cte),
cte3 as(
select *,sum(rn) over(partition by name order by id) as sm from cte2)
select * from cte3
order by id;

======================================================================================
#Running sum
#Number of persons in a lift
with cte as 
(select sum(wt) over(order by sno) total, sno, wt from lift)
select * from cte where total<200;

create table lift (sno int, wt int)
insert into lift values(4,      70)
insert into lift values(3,      30)
insert into lift values(2,      90)
insert into lift values(1,      90)

======================================================================================
